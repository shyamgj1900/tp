@startuml
'https://plantuml.com/sequence-diagram

!include Style.puml

skinparam classAttributeIconSize 0

hide circle

class BusRouteCommand

package "routes" <<rectangle>> {
  class Location
  class Route
  class Graph
  class DirectRoute
  class IndirectRoute
}

class BusRouteCommand COMMANDS_COLOR {
   -input: String
   -splitinput: String[]
   +getBusRoute(): String
   +executeCommand(): CommandResult
}

class Location ROUTES_COLOR {
   +getBusStopList(): String
   +getStopNumberAOne(command: String): int
   +getStopNumberATwo(command: String): int
   +getStopNumberDOne(command: String): int
   +getStopNumberDTwo(command: String): int
   +getStopNumberE(command: String): int
   +getStopNumberK(command: String): int
}

class Route ROUTES_COLOR {
   -busStops: String[]
   -startLocation: String
   -endLocation: String
   -vertexCodeA1: String[]
   -vertexCodeA2: String[]
   -vertexCodeD1: String[]
   -vertexCodeD2: String[]
   -vertexCodeE: String[]
   -vertexCodeK: String[]
   -graph: Graph[]
   -vertices: Arraylist<String>[]
   +setRoute(vertices: Arraylist<String>, graph: Graph): void
   +getBusStopNumber(): void
   {static} readFromFile(): void
}

class DirectRoute ROUTES_COLOR {
   +checkDirectRoutes(busNumbers: Arraylist<String>): boolean
   +checkDirectAlternateRoutes(busNumbers: Arraylist<String>): String
}

class IndirectRoute ROUTES_COLOR {
   +checkIndirectRoutes(busOne: Arraylist<String>, busTwo: Arraylist<String>, midLoc: Arraylist<String>)
}

class Graph ROUTES_COLOR {
   -vertex: int
   -adj: Arraylist<Integer>[]
   +addEdge(u: int, v: int): void
   +isConnected(u: int, v: int): boolean
}

BusRouteCommand --> "0..1" Location : location
BusRouteCommand -> "0..1" DirectRoute : directroute
BusRouteCommand -> "0..1" IndirectRoute : indirectroute
Route -> "1" Location : location
Route -> "6" Graph : graph
Route <|-- DirectRoute
Route <|-- IndirectRoute
Location .> Route

@enduml